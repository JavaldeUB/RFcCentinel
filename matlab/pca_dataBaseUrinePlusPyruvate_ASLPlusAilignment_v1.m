%% PLSRegressor_v8.m
% Script for PLS regression of the randomized database for Eth+H2O in 
% different concentrations:
% 1) the database is located in:
%    filename: C:\Users\javit\Documents\curso24_25\Docencia\EHU\EMIMEP\SSS\Lab\matlab\organized_data_with_baseline.csv
% 2) the order files are  in:
%    filename: C:\Users\javit\Documents\curso24_25\Docencia\EHU\EMIMEP\SSS\Lab\python\dataBase_EthH2O_1p2mL_1p6to3GHz_random\randomList.txt
% 3) 
% Auto-generated by MATLAB on 29-Dec-2024 07:09:54

%% clearing everything up
clear;
%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 204);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Freq_1", "Freq_2", "Freq_3", "Freq_4", "Freq_5", "Freq_6", "Freq_7", "Freq_8", "Freq_9", "Freq_10", "Freq_11", "Freq_12", "Freq_13", "Freq_14", "Freq_15", "Freq_16", "Freq_17", "Freq_18", "Freq_19", "Freq_20", "Freq_21", "Freq_22", "Freq_23", "Freq_24", "Freq_25", "Freq_26", "Freq_27", "Freq_28", "Freq_29", "Freq_30", "Freq_31", "Freq_32", "Freq_33", "Freq_34", "Freq_35", "Freq_36", "Freq_37", "Freq_38", "Freq_39", "Freq_40", "Freq_41", "Freq_42", "Freq_43", "Freq_44", "Freq_45", "Freq_46", "Freq_47", "Freq_48", "Freq_49", "Freq_50", "Freq_51", "Freq_52", "Freq_53", "Freq_54", "Freq_55", "Freq_56", "Freq_57", "Freq_58", "Freq_59", "Freq_60", "Freq_61", "Freq_62", "Freq_63", "Freq_64", "Freq_65", "Freq_66", "Freq_67", "Freq_68", "Freq_69", "Freq_70", "Freq_71", "Freq_72", "Freq_73", "Freq_74", "Freq_75", "Freq_76", "Freq_77", "Freq_78", "Freq_79", "Freq_80", "Freq_81", "Freq_82", "Freq_83", "Freq_84", "Freq_85", "Freq_86", "Freq_87", "Freq_88", "Freq_89", "Freq_90", "Freq_91", "Freq_92", "Freq_93", "Freq_94", "Freq_95", "Freq_96", "Freq_97", "Freq_98", "Freq_99", "Freq_100", "Freq_101", "Freq_102", "Freq_103", "Freq_104", "Freq_105", "Freq_106", "Freq_107", "Freq_108", "Freq_109", "Freq_110", "Freq_111", "Freq_112", "Freq_113", "Freq_114", "Freq_115", "Freq_116", "Freq_117", "Freq_118", "Freq_119", "Freq_120", "Freq_121", "Freq_122", "Freq_123", "Freq_124", "Freq_125", "Freq_126", "Freq_127", "Freq_128", "Freq_129", "Freq_130", "Freq_131", "Freq_132", "Freq_133", "Freq_134", "Freq_135", "Freq_136", "Freq_137", "Freq_138", "Freq_139", "Freq_140", "Freq_141", "Freq_142", "Freq_143", "Freq_144", "Freq_145", "Freq_146", "Freq_147", "Freq_148", "Freq_149", "Freq_150", "Freq_151", "Freq_152", "Freq_153", "Freq_154", "Freq_155", "Freq_156", "Freq_157", "Freq_158", "Freq_159", "Freq_160", "Freq_161", "Freq_162", "Freq_163", "Freq_164", "Freq_165", "Freq_166", "Freq_167", "Freq_168", "Freq_169", "Freq_170", "Freq_171", "Freq_172", "Freq_173", "Freq_174", "Freq_175", "Freq_176", "Freq_177", "Freq_178", "Freq_179", "Freq_180", "Freq_181", "Freq_182", "Freq_183", "Freq_184", "Freq_185", "Freq_186", "Freq_187", "Freq_188", "Freq_189", "Freq_190", "Freq_191", "Freq_192", "Freq_193", "Freq_194", "Freq_195", "Freq_196", "Freq_197", "Freq_198", "Freq_199", "Freq_200", "Freq_201", "Round", "Concentration", "Vial"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
organizeddatawithbaseline = readtable("C:\Users\javit\Documents\curso24_25\Investigacion\UB\GRAF\RFcCentinel\measurements\Urine\urine_Pyruvate\alignedUrinePlusPyruvate_dataBase.csv", opts);

% Convert to output type
dataBase = table2array(organizeddatawithbaseline);

% Clear temporary variables
clear organizeddatawithbaseline
clear opts



%% Getting data in different variables
%data
baseline = dataBase(1,1:201);
data = dataBase(2:end,1:201);               %measured data
y = dataBase(2:end,203);                    %concentrations
r = dataBase(2:end,202);                    %round of the sample
v = dataBase(2:end,204);                    %vial of the sample
freq = linspace(1.6,3,201);                 %Frequency Axis
freqAxis = freq(1:201);

%% Identifying labels and generating axes for processing
% Getting the numbers of the labels
uniqueNumbers = unique(y);
numUnique = numel(uniqueNumbers);
% Counting the number of samples of each label
counts = histcounts(y.', uniqueNumbers);
%uniqueNumbers = uniqueNumbers(end:-1:1);
% Getting the minimum of samples to be consider of each label.
% Not all the labels were sampled the same amount of times.
minCount = min(counts);

%% Reducing the number of samples for each label to get the same for all
Xp = data;
yp = y;

%% Plotting the selected dataBase
    colors = jet(length(uniqueNumbers));
    %colors = colors(end:-1:1,:);
    legend_handles = gobjects(length(uniqueNumbers), 1);
    hS21 = figure;
    hold on;
    for i = 1:length(uniqueNumbers)
        label = uniqueNumbers(i);
        rows = Xp(yp == label, :);
        rowsb = baseline(1,:);
        for j = 1:size(rows, 1)
            %[val, idx]=min(20.*log10(abs(rows(j,:)./rowsb)));
            h = plot(freqAxis,rows(j, :), 'Color', colors(i, :));        
            %text(freqAxis(idx), val, num2str(j), ...
            %    'HorizontalAlignment', 'left', ...
            %    'VerticalAlignment', 'middle');
            if j == 1
                legend_handles(i) = h;
            end
        end
    end
    hold off;
    xlabel("Freq (GHz)");
    ylabel("20log_{10}|S_{21}|");
    legend(legend_handles, arrayfun(@num2str, uniqueNumbers, 'UniformOutput', false), 'Location', 'best');

%% Transformations and preprocessing
% Baseline Correction
X_bc = zeros(size(Xp));
for i = 1:length(uniqueNumbers)
    label = uniqueNumbers(i);
    rows = Xp(yp == label, :);
    rowsb = baseline(1,:);
    for j = 1:size(rows, 1)
        X_bc((i-1)*size(rows,1)+j,:) = abs(rows(j,:)-rowsb);
    end
end
% Autoscaling only magnitude
%X_bc_wo0 = X_bc(1:end-98,:);
X_mean = mean(X_bc);
X_std = std(X_bc);
X_autoS = (X_bc);%./X_std;

%% Plotting the autoscaled data
    colors = jet(length(uniqueNumbers));
    %colors = colors(end:-1:1,:);
    legend_handles = gobjects(length(uniqueNumbers), 1);
    hS21 = figure;
    hold on;
    for i = 1:length(uniqueNumbers)
        label = uniqueNumbers(i);
        rows = X_autoS(yp == label, :);
        rowsb = baseline(1,:);
        for j = 1:size(rows, 1)
            %[val, idx]=min(20.*log10(abs(rows(j,:)./rowsb)));
            h = plot(freqAxis,rows(j, :), 'Color', colors(i, :));        
            %text(freqAxis(idx), val, num2str(j), ...
            %    'HorizontalAlignment', 'left', ...
            %    'VerticalAlignment', 'middle');
            if j == 1
                legend_handles(i) = h;
            end
        end
    end
    hold off;
    xlabel("Freq (GHz)");
    ylabel("20log_{10}|S_{21}|");
    legend(legend_handles, arrayfun(@num2str, uniqueNumbers, 'UniformOutput', false), 'Location', 'best');


%% Calculating the PCA decompsition
%PCA and plots
[coeff, score, latent, ~, explained] = pca(X_autoS);
numComponents = 40; % Limit to 20 components
coeff = coeff(:, 1:numComponents);
score = score(:, 1:numComponents);
explained = explained(1:numComponents);
%% Plot the explained variance
% Plot explained variance
figure;
bar(explained, 'FaceAlpha', 0.7);
title('Explained Variance Distribution by Principal Components');
xlabel('Principal Component');
ylabel('Explained Variance (%)');
grid on;
figure;
plot(cumsum(explained), '-o', 'LineWidth', 1.5, 'DisplayName', 'Cumulative Explained Variance');
xlabel('Principal Component');
ylabel('Explained Variance (%)');
title('Explained Variance by Principal Components');
legend;
grid on;
%%
% 2D Scatter plot: PC2 vs. PC1
figure;
scatter(cat(1,score(1:20, 1),score(22:65, 1),score(67:end, 1)), cat(1,score(1:20, 2),score(22:65, 2),score(67:end, 2)),...
    50, cat(1,yp(1:20, 1),yp(22:65, 1),yp(67:end, 1)), 'filled');
xlabel('Principal Component 1');
ylabel('Principal Component 2');
title('PC2 vs. PC1');
colormap('jet');
colorbar;
grid on;

% % Annotate the first 5 and last 5 samples relative to each concentration
% uniqueLabels = unique(yp);
% for label = uniqueLabels'
%     % Get indices for this concentration
%     idx = find(yp == label);
%     numSamples = length(idx);
% 
%     % Select first 5 and last 5 samples
%     relativeNumbers = [1:3, numSamples-2:numSamples];
%     selectedIdx = [idx(1:3); idx(end-2:end)];
% 
%     % Annotate selected samples with relative numbers
%     for i = 1:length(selectedIdx)
%         sampleIdx = selectedIdx(i);
%         relativeNum = relativeNumbers(i); % Relative numbering
%         text(score(sampleIdx, 1), score(sampleIdx, 2), ...
%             num2str(relativeNum), 'FontSize', 8, 'HorizontalAlignment', 'left');
%     end
% end
% hold off;
%%
% 2D Scatter plot: PC3 vs. PC1
figure;
scatter(score(:, 1), score(:, 3), 50, yp, 'filled');
xlabel('Principal Component 1');
ylabel('Principal Component 3');
title('PC3 vs. PC1');
colormap('jet');
colorbar;
grid on;
% Annotate the first 5 and last 5 samples relative to each concentration
% for label = uniqueLabels'
%     % Get indices for this concentration
%     idx = find(yp == label);
%     numSamples = length(idx);
% 
%     % Select first 5 and last 5 samples
%     relativeNumbers = [1:5, numSamples-4:numSamples];
%     selectedIdx = [idx(1:5); idx(end-4:end)];
% 
%     % Annotate selected samples with relative numbers
%     for i = 1:length(selectedIdx)
%         sampleIdx = selectedIdx(i);
%         relativeNum = relativeNumbers(i); % Relative numbering
%         text(score(sampleIdx, 1), score(sampleIdx, 3), ...
%             num2str(relativeNum), 'FontSize', 16, 'HorizontalAlignment', 'left');
%     end
% end
hold off;
%%
%2D Scatter plot: PC3 vs. PC2
figure;
scatter(score(:, 2), score(:, 3), 50, yp, 'filled');
xlabel('Principal Component 2');
ylabel('Principal Component 3');
title('PC3 vs. PC2');
colormap('jet');
colorbar;
grid on;

%%
% 3D Scatter plot: PC1, PC2, and PC3
figure;
scatter3(score(:, 1), score(:, 2), score(:, 3), 50, yp, 'filled');
xlabel('Principal Component 1');
ylabel('Principal Component 2');
zlabel('Principal Component 3');
title('3D Plot of PC1, PC2, and PC3');
colormap('jet');
colorbar;
grid on;

%%
% Outlayer detection:
% Supón que ya hiciste el PCA:
% Supón que ya hiciste el PCA:
k = 2;
scores_k = score(:, 1:k);

n_clases = 9;
tam_clase = 50;
umbral = chi2inv(0.95, k);

% Inicializa
outliers_por_clase = false(size(scores_k,1), 1);

figure; hold on; axis equal;
colors = lines(n_clases);  % paleta de colores

for c = 1:n_clases
    % Índices de la clase actual
    idx_ini = (c-1)*tam_clase + 1;
    idx_fin = c*tam_clase;
    idx = idx_ini:idx_fin;

    % Datos de la clase
    Xc = scores_k(idx, :);
    mu = mean(Xc);
    S = cov(Xc);

    % Distancia de Mahalanobis
    D2 = mahal(Xc, Xc);
    outliers = D2 > umbral;
    outliers_por_clase(idx) = outliers;

    % Scatter: pinta normales y outliers con el mismo color
    scatter(Xc(~outliers,1), Xc(~outliers,2), 36, colors(c,:), 'o', 'filled');
    scatter(Xc(outliers,1), Xc(outliers,2), 60, colors(c,:), '^', 'LineWidth', 1.5);

   % Solo dibuja la elipse si hay outliers en la clase
    if any(outliers)
        error_ellipse(S, mu, 'conf', 0.95, 'Color', colors(c,:), 'LineStyle', '--');
    end
end

%xlabel('PC1', 'FontSize', 18);
%ylabel('PC2', 'FontSize', 18);
%title('Outliers al 95% (sólo elipses si hay >3)', 'FontSize', 18);
%set(gca, 'FontSize', 18);
legend('Normal','Outlier');  % podrías mejorar esto si querés un legend por clase
